import os
import logging
import asyncio
import re
from datetime import datetime, timezone, timedelta
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import aiohttp
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.errors import ChannelPrivateError, FloodWaitError
import xml.etree.ElementTree as ET

# APScheduler imports
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# ---------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ----------------------
load_dotenv()
API_TOKEN         = os.getenv("BOT_TOKEN")
CHANNEL_ID        = os.getenv("CHANNEL_ID")         # –ù–∞–ø—Ä–∏–º–µ—Ä, "-1001234567890"
TELEGRAM_API_ID   = os.getenv("TELEGRAM_API_ID")
TELEGRAM_API_HASH = os.getenv("TELEGRAM_API_HASH")
TELETHON_SESSION  = os.getenv("TELETHON_SESSION")
OWNER_ID          = int(os.getenv("OWNER_ID"))      # –í–∞—à user_id

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å—ë –µ—Å—Ç—å
for var_name in ("BOT_TOKEN", "CHANNEL_ID", "TELEGRAM_API_ID", "TELEGRAM_API_HASH", "TELETHON_SESSION"):
    if not os.getenv(var_name):
        raise RuntimeError(f"{var_name} is not set in .env")

# --- Logging ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------------------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ----------------------
COINGECKO_MARKETS_URL   = "https://api.coingecko.com/api/v3/coins/markets"
COINGECKO_GLOBAL_URL    = "https://api.coingecko.com/api/v3/global"
FEAR_GREED_URL          = "https://api.alternative.me/fng/"

COINDESK_RSS_URL       = "https://www.coindesk.com/arc/outboundfeeds/rss/"
COINTELEGRAPH_RSS_URL  = "https://cointelegraph.com/rss"

WHALE_ALERT_CHANNEL   = "whale_alert_io"
MEXC_LISTINGS_CHANNEL = "mexc_listings_tracker"

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ GMT+4
GMT_PLUS_4 = timezone(timedelta(hours=4))

# ---------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ----------------------
bot = Bot(token=API_TOKEN)
dp  = Dispatcher()

telethon_client = TelegramClient(
    StringSession(TELETHON_SESSION),
    api_id=int(TELEGRAM_API_ID),
    api_hash=TELEGRAM_API_HASH
)

# ---------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------------------

async def safe_send(chat_id: int | str, text: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ chat_id (–∫–∞–Ω–∞–ª –∏–ª–∏ –ª–∏—á–∫—É).
    –ü—Ä–∏ —Ç–∞–π–º–∞—É—Ç–∞—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞—Ö –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º.
    """
    for attempt in range(1, 4):
        try:
            await bot.send_message(chat_id, text, parse_mode="HTML", request_timeout=30)
            return
        except Exception as e:
            logger.warning("safe_send: –ø–æ–ø—ã—Ç–∫–∞ %d/3 –Ω–µ—É–¥–∞—á–Ω–∞ (%s).", attempt, e)
            await asyncio.sleep(2)
    logger.error("safe_send: –≤—Å–µ 3 –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ chat_id=%s –Ω–µ —É–¥–∞–ª–∏—Å—å.", chat_id)


async def retry_get(session: aiohttp.ClientSession, url: str, params: dict = None,
                    retries: int = 3, delay: int = 5) -> dict | list | None:
    """
    –î–µ–ª–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å –∫ url —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ params.
    –ï—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è ‚Äì –ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–æ retries —Ä–∞–∑ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π delay —Å–µ–∫—É–Ω–¥.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π JSON (dict –∏–ª–∏ list) –ª–∏–±–æ None.
    """
    for attempt in range(1, retries + 1):
        try:
            async with session.get(url, params=params, timeout=aiohttp.ClientTimeout(total=30)) as resp:
                # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º JSON
                return await resp.json()
        except Exception as e:
            if attempt == retries:
                logger.error("retry_get: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å %s –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫: %s", url, retries, e)
                return None
            else:
                logger.warning("retry_get: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ %s: %s ‚Äì –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ %d —Å–µ–∫ (–ø–æ–ø—ã—Ç–∫–∞ %d/%d)",
                               url, e, delay, attempt, retries)
                await asyncio.sleep(delay)


# ---------------------- –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ----------------------

###########################################
# 1) Top 20 Crypto Pairs (USD)           #
###########################################
async def fetch_top_pairs(chat_id: int | str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø-20 –ø–∞—Ä –∏–∑ CoinGecko –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ chat_id.
    –§–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞: "üîù Top 20 Crypto Pairs (USD) @Armcryptonews"
    """
    async with aiohttp.ClientSession() as session:
        data = await retry_get(
            session,
            COINGECKO_MARKETS_URL,
            params={
                "vs_currency": "usd",
                "order":       "market_cap_desc",
                "per_page":    20,
                "page":        1,
                "price_change_percentage": "24h"
            },
            retries=3,
            delay=5
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä–Ω—É–ª—Å—è —Å–ø–∏—Å–æ–∫
    if not isinstance(data, list):
        await safe_send(chat_id, "<b>üîù Top 20 Crypto Pairs (USD) @Armcryptonews</b>\n\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç CoinGecko.")
        return

    if len(data) == 0:
        await safe_send(chat_id, "<b>üîù Top 20 Crypto Pairs (USD) @Armcryptonews</b>\n\n‚Ä¢ –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.")
        return

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
    title = "<b>üîù Top 20 Crypto Pairs (USD) @Armcryptonews</b>\n\n"
    body_lines = []
    for coin in data:
        if not isinstance(coin, dict) or 'symbol' not in coin:
            await safe_send(chat_id, "<b>üîù Top 20 Crypto Pairs (USD) @Armcryptonews</b>\n\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏.")
            return

        sym   = coin.get('symbol', '').upper()
        price = coin.get('current_price', 0)
        chg   = coin.get('price_change_percentage_24h', 0)
        emoji = "üî¥" if chg < 0 else "üü¢"
        body_lines.append(f"‚Ä¢ <code>{sym}/USD</code>: <b>${price:,.2f}</b> | <i>{chg:+.2f}%</i> {emoji}")

    text = title + "\n".join(body_lines)
    await safe_send(chat_id, text)


###########################################
# 2) Fear & Greed Index (FNG)            #
###########################################
async def fetch_fear_greed(chat_id: int | str):
    """
    –§–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞: "üò± Fear & Greed Index @Armcryptonews"
    """
    async with aiohttp.ClientSession() as session:
        try:
            resp = await session.get(FEAR_GREED_URL, timeout=aiohttp.ClientTimeout(total=30))
            data = await resp.json()
        except Exception as e:
            logger.error("fetch_fear_greed error: %s", e)
            await safe_send(chat_id, "<b>üò± Fear & Greed Index @Armcryptonews</b>\n\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
            return

    idx   = data.get('data', [{}])[0] if isinstance(data, dict) else {}
    value = idx.get('value', '‚Äî')
    cls   = idx.get('value_classification', '‚Äî')

    now = datetime.now(timezone.utc).astimezone(GMT_PLUS_4).strftime("%Y-%m-%d %H:%M GMT+4")
    text = (
        "<b>üò± Fear & Greed Index @Armcryptonews</b>\n\n"
        f"<i>{now}</i>\n"
        f"‚Ä¢ Current Value: <b>{value}</b>\n"
        f"‚Ä¢ Classification: <i>{cls}</i>"
    )
    await safe_send(chat_id, text)


###########################################
# 3) Top 10 Gainers & Losers (24h)       #
###########################################
async def fetch_gainers_losers(chat_id: int | str):
    """
    –§–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞: "üìä Top 10 Gainers & Losers (24h) @Armcryptonews"
    """
    async with aiohttp.ClientSession() as session:
        data = await retry_get(
            session,
            COINGECKO_MARKETS_URL,
            params={
                "vs_currency": "usd",
                "order":       "market_cap_desc",
                "per_page":    100,
                "page":        1,
                "price_change_percentage": "24h"
            },
            retries=3,
            delay=5
        )

    if not isinstance(data, list):
        await safe_send(chat_id, "<b>üìä Top 10 Gainers & Losers (24h) @Armcryptonews</b>\n\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç CoinGecko.")
        return

    if len(data) == 0:
        await safe_send(chat_id, "<b>üìä Top 10 Gainers & Losers (24h) @Armcryptonews</b>\n\n‚Ä¢ –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.")
        return

    for item in data:
        if not isinstance(item, dict) or 'price_change_percentage_24h' not in item:
            await safe_send(chat_id, "<b>üìä Top 10 Gainers & Losers (24h) @Armcryptonews</b>\n\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏.")
            return

    sorted_data = sorted(data, key=lambda x: x.get('price_change_percentage_24h', 0) or 0)
    losers = sorted_data[:10]
    gainers = sorted_data[-10:][::-1]

    now = datetime.now(timezone.utc).astimezone(GMT_PLUS_4).strftime("%Y-%m-%d %H:%M GMT+4")
    title = f"<b>üìä Top 10 Gainers & Losers (24h) @Armcryptonews | {now}</b>\n\n"

    lines = ["<i>Top 10 Gainers:</i>"]
    for coin in gainers:
        sym   = coin.get('symbol', '').upper()
        chg   = coin.get('price_change_percentage_24h', 0)
        price = coin.get('current_price', 0)
        lines.append(f"‚Ä¢ <code>{sym}</code>: <b>{chg:+.2f}%</b> ({price:,.2f} USD) üü¢")

    lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    lines.append("<i>Top 10 Losers:</i>")
    for coin in losers:
        sym   = coin.get('symbol', '').upper()
        chg   = coin.get('price_change_percentage_24h', 0)
        price = coin.get('current_price', 0)
        lines.append(f"‚Ä¢ <code>{sym}</code>: <b>{chg:+.2f}%</b> ({price:,.2f} USD) üî¥")

    text = title + "\n".join(lines)
    await safe_send(chat_id, text)


###########################################
# 4) Global Market Cap & 24h Volume      #
###########################################
async def fetch_global_stats(chat_id: int | str):
    """
    –§–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞: "üåê Global Crypto Stats @Armcryptonews"
    """
    async with aiohttp.ClientSession() as session:
        try:
            resp = await session.get(COINGECKO_GLOBAL_URL, timeout=aiohttp.ClientTimeout(total=30))
            data = await resp.json()
        except Exception as e:
            logger.error("fetch_global_stats error: %s", e)
            await safe_send(chat_id, "<b>üåê Global Crypto Stats @Armcryptonews</b>\n\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
            return

    d = data.get('data', {}) if isinstance(data, dict) else {}
    total_mc = d.get('total_market_cap', {}).get('usd', 0)
    mc_change = d.get('market_cap_change_percentage_24h_usd', 0)
    total_vol = d.get('total_volume', {}).get('usd', 0)

    now = datetime.now(timezone.utc).astimezone(GMT_PLUS_4).strftime("%Y-%m-%d %H:%M GMT+4")
    text = (
        "<b>üåê Global Crypto Stats @Armcryptonews</b>\n\n"
        f"<i>{now}</i>\n"
        f"‚Ä¢ Total Market Cap: <b>${total_mc:,.0f}</b>\n"
        f"  ‚Ä¢ 24h Change: <i>{mc_change:+.2f}%</i>\n\n"
        f"‚Ä¢ 24h Total Volume: <b>${total_vol:,.0f}</b>"
    )
    await safe_send(chat_id, text)


##################################
# 5) Whale Alerts (from TG)      #
##################################
async def fetch_whale_alerts_from_tg(chat_id: int | str):
    """
    –§–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞: "üêã Whale Alerts @Armcryptonews"
    """
    if not telethon_client.is_connected():
        await telethon_client.connect()

    try:
        entity = await telethon_client.get_entity(WHALE_ALERT_CHANNEL)
    except ChannelPrivateError:
        await safe_send(chat_id, "<b>üêã Whale Alerts @Armcryptonews</b>\n\n‚ùå Cannot access @whale_alert_io.")
        return
    except Exception as e:
        logger.error("Telethon get_entity error: %s", e)
        await safe_send(chat_id, "<b>üêã Whale Alerts @Armcryptonews</b>\n\n‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É.")
        return

    try:
        messages = await asyncio.wait_for(
            telethon_client.get_messages(entity, limit=5),
            timeout=20
        )
    except asyncio.TimeoutError:
        logger.error("Telethon: timeout while fetching messages")
        await safe_send(chat_id, "<b>üêã Whale Alerts @Armcryptonews</b>\n\n‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return
    except Exception as e:
        logger.error("Telethon get_messages error: %s", e)
        await safe_send(chat_id, "<b>üêã Whale Alerts @Armcryptonews</b>\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return

    if not messages:
        await safe_send(chat_id, "<b>üêã Whale Alerts @Armcryptonews</b>\n\n‚Ä¢ –ù–µ–¥–∞–≤–Ω–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç.")
        return

    now = datetime.now(timezone.utc).astimezone(GMT_PLUS_4).strftime("%Y-%m-%d %H:%M GMT+4")
    lines = []
    for msg in messages:
        dt_gmt4 = msg.date.astimezone(GMT_PLUS_4).strftime("%Y-%m-%d %H:%M GMT+4")
        text = msg.message or ""
        lines.append(f"{dt_gmt4}\n{text}")

    full_text = f"<b>üêã Whale Alerts @Armcryptonews | {now}</b>\n\n" + "\n\n".join(lines)
    await safe_send(chat_id, full_text)


###################################################
# 6) MEXC Listings (Spot/Futures) from TG        #
###################################################
async def fetch_mexc_listings_from_tg(chat_id: int | str):
    """
    –§–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞: "üÜï MEXC Listings @Armcryptonews"
    """
    if not telethon_client.is_connected():
        await telethon_client.connect()

    try:
        entity = await telethon_client.get_entity(MEXC_LISTINGS_CHANNEL)
    except ChannelPrivateError:
        await safe_send(chat_id, "<b>üÜï MEXC Listings @Armcryptonews</b>\n\n‚ùå Cannot access @mexc_listings_tracker.")
        return
    except Exception as e:
        logger.error("Telethon get_entity error (MEXC): %s", e)
        await safe_send(chat_id, "<b>üÜï MEXC Listings @Armcryptonews</b>\n\n‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞.")
        return

    try:
        messages = await asyncio.wait_for(
            telethon_client.get_messages(entity, limit=5),
            timeout=20
        )
    except asyncio.TimeoutError:
        logger.error("Telethon: timeout while fetching MEXC listings")
        await safe_send(chat_id, "<b>üÜï MEXC Listings @Armcryptonews</b>\n\n‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return
    except Exception as e:
        logger.error("Telethon get_messages error (MEXC): %s", e)
        await safe_send(chat_id, "<b>üÜï MEXC Listings @Armcryptonews</b>\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.")
        return

    if not messages:
        await safe_send(chat_id, "<b>üÜï MEXC Listings @Armcryptonews</b>\n\n‚Ä¢ –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –ª–∏—Å—Ç–∏–Ω–≥–æ–≤.")
        return

    now = datetime.now(timezone.utc).astimezone(GMT_PLUS_4).strftime("%Y-%m-%d %H:%M GMT+4")
    lines = []
    for msg in messages:
        text = msg.message or ""
        dt_gmt4 = msg.date.astimezone(GMT_PLUS_4).strftime("%Y-%m-%d %H:%M GMT+4")
        match = re.search(r"(?:–ø–∞—Ä–∞|pair)\s+([A-Z0-9]+)", text, re.IGNORECASE)
        if match:
            pair = match.group(1)
            if re.search(r"(?:—Å–ø–æ—Ç|spot)", text, re.IGNORECASE):
                listing_type = "New spot pair"
            elif re.search(r"(?:—Ñ—å—é—á–µ—Ä—Å|futures?)", text, re.IGNORECASE):
                listing_type = "New futures pair"
            else:
                listing_type = "New pair"
            lines.append(f"{dt_gmt4}\n{listing_type} {pair}")
        else:
            cand = re.findall(r"\b([A-Z0-9]{6,12})\b", text)
            for pair in cand:
                if re.search(r"(?:—Å–ø–æ—Ç|spot)", text, re.IGNORECASE):
                    listing_type = "New spot pair"
                elif re.search(r"(?:—Ñ—å—é—á–µ—Ä—Å|futures?)", text, re.IGNORECASE):
                    listing_type = "New futures pair"
                else:
                    listing_type = "New pair"
                lines.append(f"{dt_gmt4}\n{listing_type} {pair}")

    full_text = f"<b>üÜï MEXC Listings @Armcryptonews | {now}</b>\n\n" + ("\n\n".join(lines) if lines else "No valid listings found.")
    await safe_send(chat_id, full_text)


##################################
# 7) Latest Crypto News (RSS)    #
##################################
async def fetch_rss_feed(rss_url: str) -> list[tuple[str, str, str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ –∫–æ—Ä—Ç–µ–∂–µ–π (title, link, date_str).
    """
    async with aiohttp.ClientSession() as session:
        try:
            resp = await session.get(rss_url, timeout=aiohttp.ClientTimeout(total=30))
            text = await resp.text()
        except Exception as e:
            logger.error("RSS fetch error (%s): %s", rss_url, e)
            return []

    try:
        root = ET.fromstring(text)
    except ET.ParseError as e:
        logger.error("RSS parse error (%s): %s", rss_url, e)
        return []

    items = []
    for item in root.findall(".//item")[:5]:
        title = item.findtext("title", default="").strip()
        link  = item.findtext("link", default="").strip()
        pub_date = item.findtext("pubDate", default="").strip()
        try:
            dt = datetime.strptime(pub_date, "%a, %d %b %Y %H:%M:%S %Z").replace(tzinfo=timezone.utc)
            dt_gmt4 = dt.astimezone(GMT_PLUS_4)
            date_str = dt_gmt4.strftime("%Y-%m-%d %H:%M GMT+4")
        except Exception:
            date_str = ""
        items.append((title, link, date_str))
    return items


async def fetch_crypto_rss_news(chat_id: int | str):
    """
    –ó–∞–≥–æ–ª–æ–≤–æ–∫: "üì∞ Latest Crypto News @Armcryptonews"
    """
    coindesk_items      = await fetch_rss_feed(COINDESK_RSS_URL)
    cointelegraph_items = await fetch_rss_feed(COINTELEGRAPH_RSS_URL)

    combined = coindesk_items + cointelegraph_items
    seen = set()
    unique_items = []
    for title, link, date_str in combined:
        if link in seen:
            continue
        seen.add(link)
        unique_items.append((title, link, date_str))
        if len(unique_items) >= 5:
            break

    now = datetime.now(timezone.utc).astimezone(GMT_PLUS_4).strftime("%Y-%m-%d %H:%M GMT+4")
    header = f"<b>üì∞ Latest Crypto News @Armcryptonews | {now}</b>\n\n"

    if not unique_items:
        await safe_send(chat_id, header + "‚Ä¢ No recent RSS articles found.\n")
        return

    body_lines = []
    for headline, link, date_str in unique_items:
        if date_str:
            body_lines.append(f"‚Ä¢ {headline} ({date_str})\n  {link}")
        else:
            body_lines.append(f"‚Ä¢ {headline}\n  {link}")

    await safe_send(chat_id, header + "\n".join(body_lines))


# ---------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ APScheduler ----------------------

scheduler = AsyncIOScheduler(timezone="UTC")

# 07:00 GMT+4 ‚Üí 03:00 UTC (Top 20 Pairs)
trigger_top_pairs_0700 = CronTrigger(hour=3, minute=0, timezone="UTC")
# 10:00 GMT+4 ‚Üí 06:00 UTC (Top 20 Pairs –ø–æ–≤—Ç–æ—Ä–Ω–æ)
trigger_top_pairs_1000 = CronTrigger(hour=6, minute=0, timezone="UTC")
# 10:30 GMT+4 ‚Üí 06:30 UTC (MEXC Listings)
trigger_mexc_1030 = CronTrigger(hour=6, minute=30, timezone="UTC")
# 11:00 GMT+4 ‚Üí 07:00 UTC (Fear & Greed)
trigger_fear_1100 = CronTrigger(hour=7, minute=0, timezone="UTC")
# 13:00 GMT+4 ‚Üí 09:00 UTC (Top 10 Gainers & Losers)
trigger_gainers_1300 = CronTrigger(hour=9, minute=0, timezone="UTC")
# 15:00 GMT+4 ‚Üí 11:00 UTC (Global Market Cap & 24h Volume)
trigger_global_1500 = CronTrigger(hour=11, minute=0, timezone="UTC")
# 16:00 GMT+4 ‚Üí 12:00 UTC (Whale Alerts)
trigger_whale_1600 = CronTrigger(hour=12, minute=0, timezone="UTC")
# 23:00 GMT+4 ‚Üí 19:00 UTC (Latest Crypto News)
trigger_news_2300 = CronTrigger(hour=19, minute=0, timezone="UTC")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ —à–ª—é—Ç –≤ –∫–∞–Ω–∞–ª (CHANNEL_ID)
scheduler.add_job(lambda: fetch_top_pairs(CHANNEL_ID), trigger_top_pairs_0700, id="daily_top_pairs_0700")
scheduler.add_job(lambda: fetch_top_pairs(CHANNEL_ID), trigger_top_pairs_1000, id="daily_top_pairs_1000")
scheduler.add_job(lambda: fetch_mexc_listings_from_tg(CHANNEL_ID), trigger_mexc_1030, id="daily_mexc_listings_1030")
scheduler.add_job(lambda: fetch_fear_greed(CHANNEL_ID), trigger_fear_1100, id="daily_fear_greed_1100")
scheduler.add_job(lambda: fetch_gainers_losers(CHANNEL_ID), trigger_gainers_1300, id="daily_gainers_losers_1300")
scheduler.add_job(lambda: fetch_global_stats(CHANNEL_ID), trigger_global_1500, id="daily_global_stats_1500")
scheduler.add_job(lambda: fetch_whale_alerts_from_tg(CHANNEL_ID), trigger_whale_1600, id="daily_whale_alerts_1600")
scheduler.add_job(lambda: fetch_crypto_rss_news(CHANNEL_ID), trigger_news_2300, id="daily_news_2300")

# –ù–µ –≤—ã–∑—ã–≤–∞–µ–º scheduler.start() –∑–¥–µ—Å—å ‚Äî –∑–∞–ø—É—Å—Ç–∏–º –≤–Ω—É—Ç—Ä–∏ main()


# ---------------------- –•–µ–Ω–¥–ª–µ—Ä /start ----------------------

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü (OWNER_ID), –ø—É–±–ª–∏–∫—É–µ–º —Å—Ä–∞–∑—É –≤ –∫–∞–Ω–∞–ª
    if user_id == OWNER_ID:
        await fetch_top_pairs(CHANNEL_ID)
        await fetch_fear_greed(CHANNEL_ID)
        await fetch_gainers_losers(CHANNEL_ID)
        await fetch_global_stats(CHANNEL_ID)
        await fetch_whale_alerts_from_tg(CHANNEL_ID)
        await fetch_mexc_listings_from_tg(CHANNEL_ID)
        await fetch_crypto_rss_news(CHANNEL_ID)
        await message.reply("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª.")
    else:
        # –í—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø—Ä–∏—Å—ã–ª–∞–µ–º –ª–∏—á–Ω–æ (–≤ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        await fetch_top_pairs(message.chat.id)
        await fetch_fear_greed(message.chat.id)
        await fetch_gainers_losers(message.chat.id)
        await fetch_global_stats(message.chat.id)
        await fetch_whale_alerts_from_tg(message.chat.id)
        await fetch_mexc_listings_from_tg(message.chat.id)
        await fetch_crypto_rss_news(message.chat.id)
        await message.reply("‚úÖ –í–æ—Ç –≤—Å—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ª–∏—á–Ω–æ –¥–ª—è –≤–∞—Å.")


# ---------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ APScheduler ----------------------

async def main():
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º Telethon
    await telethon_client.connect()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —à–µ–¥—É–ª–µ—Ä (APScheduler) –≤–Ω—É—Ç—Ä–∏ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ event loop
    scheduler.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Aiogram-–ø–æ–ª–ª–∏–Ω–≥
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
